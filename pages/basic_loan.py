import streamlit as st
import pandas as pd 


st.title("Basic Loan Simulation")

st.markdown("""
### Description

Cette simulation vous permet de calculer les mensualitÃ©s et le coÃ»t total d'un prÃªt simple. 
Il vous suffit d'entrer le montant du prÃªt, le taux d'intÃ©rÃªt et la durÃ©e du prÃªt, puis de cliquer sur "Calculer". 
Les rÃ©sultats afficheront le montant de la mensualitÃ©, le coÃ»t total du prÃªt et les intÃ©rÃªts payÃ©s.
""")

st.divider()

# revenus = st.number_input("Revenus nets mensuels (â‚¬)", min_value=500, max_value=50_000, value=3000, step=100)
# penalites_remb = st.number_input("PÃ©nalitÃ©s remboursement anticipÃ© (%)", min_value=0.0, max_value=5.0, value=1.0, step=0.1)
# taux_fixe = st.radio("ğŸ”„ Type de taux d'intÃ©rÃªt", ["Fixe", "Variable"])
# type_remboursement = st.radio("Type de remboursement", ["Amortissable", "In Fine"])

capital = st.number_input("Montant de l'emprunt (â‚¬)", min_value=1000, max_value=10_000_000, value=200_000, step=1)
duree = st.number_input("DurÃ©e du prÃªt (mois)", min_value=1, max_value=400, value=120, step=1)
taux_interet = st.number_input("Taux dâ€™intÃ©rÃªt nominal (%)", min_value=0.1, max_value=20.0, value=3.0, step=0.01)
assurance = st.number_input("Assurance emprunteur (% du capital)", min_value=0.0, max_value=1.0, value=0.1, step=0.01)
frais_dossier = st.number_input("Frais de dossier (â‚¬)", min_value=0, max_value=5000, value=1000, step=1)

# Calcul de la mensualitÃ© (hors assurance)
taux_mensuel = (taux_interet / 100) / 12
mensualite = capital * (taux_mensuel / (1 - (1 + taux_mensuel) ** -duree))

# Tableau d'amortissement
solde = capital
cumul_interets = 0
cumul_assurance = 0
cumul_total = 0

data = []
for mois in range(1, duree + 1):
    interets = solde * taux_mensuel
    capital_rembourse = mensualite - interets
    assurance_mensuelle = (assurance / 100) * capital / 12
    cout_total = mensualite + assurance_mensuelle
    cumul_interets += interets
    cumul_assurance += assurance_mensuelle
    cumul_total += cout_total
    solde -= capital_rembourse

    data.append([mois, mensualite, assurance_mensuelle, interets, capital_rembourse, cout_total, cumul_interets, cumul_assurance, cumul_total])
    
df = pd.DataFrame(data, columns=["Mois", "MensualitÃ©", "Assurance", "IntÃ©rÃªts", "Capital remboursÃ©", "CoÃ»t total", "Cumul IntÃ©rÃªts","Cumul Assurance","Cumul Total"])

# Calcul des coÃ»ts totaux
total_interets = df["IntÃ©rÃªts"].sum()
total_assurance = df["Assurance"].sum()
cout_total_pret = total_interets + total_assurance + capital + frais_dossier

# Ratios clÃ©s
ratio_frais = (frais_dossier / cout_total_pret) * 100
ratio_interets = (total_interets / cout_total_pret) * 100
ratio_assurance = (total_assurance / cout_total_pret) * 100
ratio_cout_vs_capital = (cout_total_pret / capital) * 100


st.title("Analyse du PrÃªt")
st.subheader("ParamÃ¨tres")
st.write("")

col1, col2, col3, col4, col5 = st.columns(5)

def small_metric(label, value):
    st.markdown(f"""
        <div style="text-align:center; font-size:12px; padding:4px; border:1px solid #ddd; border-radius:5px">
            <strong>{label}</strong><br>
            <span style="font-size:14px">{value}</span>
        </div>
    """, unsafe_allow_html=True)

with col1: small_metric("Emprunt", f"{capital:,.0f} â‚¬")
with col2: small_metric("DurÃ©e", f"{duree} mois")
with col3: small_metric("Taux", f"{taux_interet:,.2} %")
with col4: small_metric("Assurance", f"{assurance:,.2} %")
with col5: small_metric("Frais", f"{frais_dossier:,.0f} â‚¬")

st.write("")
st.subheader("Indicateurs")
st.write("")

col1, col2, col3 = st.columns(3)
col1.metric("CoÃ»t total du prÃªt", f"{cout_total_pret:,.0f} â‚¬")
col2.metric("Total des intÃ©rÃªts", f"{total_interets:,.0f} â‚¬")
col3.metric("Total de l'assurance", f"{total_assurance:,.0f} â‚¬")

col4, col5, col6 = st.columns(3)
col4.metric("Part des intÃ©rÃªts", f"{ratio_interets:.2f} %")
col5.metric("Part de l'assurance", f"{ratio_assurance:.2f} %")
col6.metric("CoÃ»t total vs Capital", f"{ratio_cout_vs_capital:.2f} %")

col7, col8, col9 = st.columns(3)
col7.metric("Part des frais", f"{ratio_frais:.2f} %")

tab1, tab2, tab3 = st.tabs(["Tableau d'Amortissement", "Ã‰volution des IntÃ©rÃªts", "Accumulation des CoÃ»ts"])

with tab1:
    st.write("### Tableau d'Amortissement")
    st.dataframe(df.style.format({"MensualitÃ©": "{:,.2f} â‚¬", "Assurance": "{:,.2f} â‚¬", "IntÃ©rÃªts": "{:,.2f} â‚¬", 
        "Capital remboursÃ©": "{:,.2f} â‚¬", "CoÃ»t total": "{:,.2f} â‚¬", "Cumul IntÃ©rÃªts": "{:,.2f} â‚¬","Cumul Assurance": "{:,.2f} â‚¬","Cumul Total": "{:,.2f} â‚¬"}))
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("TÃ©lÃ©charger le tableau en CSV", csv, "tableau_amortissement.csv", "text/csv")

with tab2:
    st.write("### Ã‰volution du CoÃ»t des IntÃ©rÃªts")
    st.bar_chart(df[["Mois", "IntÃ©rÃªts","Capital remboursÃ©"]].set_index("Mois"))
    
with tab3:
    st.write("### Accumulation des IntÃ©rÃªts et du CoÃ»t Total")
    st.area_chart(df[["Mois", "Cumul IntÃ©rÃªts", "Cumul Assurance", "Cumul Total"]].set_index("Mois"))